service: workshop-serverless-graphql
app: workshop-serverless-graphql

plugins: 
  - serverless-offline
  - serverless-webpack
  - serverless-offline-kinesis

provider:
  name: aws
  runtime: nodejs10.x

# you can overwrite defaults here
  region: ${opt:region, 'eu-west-1'}
  stage: ${opt:stage, 'dev'}

custom: 
  ingestStream: ingest-${self:provider.stage}
  serverless-offline-kinesis:
    apiVersion: '2013-12-02'
    endpoint: http://0.0.0.0:4567
    region: eu-west-1
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false
    readInterval: 500

functions:
  ingest:
    handler: src/functions/ingest.handler
    events:
    - http:
        path: ingest
        method: post
        cors: true
  process:
    handler: src/functions/process.handler
    events:
      - stream:
          type: kinesis
          arn: 
            Fn::GetAtt: [ IngestStream, Arn ]
          batchSize: 1
          startingPosition: LATEST
          enabled: true
  expose:
    handler: src/functions/expose.handler
  graphql:
    handler: src/functions/graphql.handler
    events:
    - http:
        path: graphql
        method: post
        cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources: 
  Resources:
    IngestStream:
      Type: AWS::Kinesis::Stream
      Properties:
        Name: ${self:custom.ingestStream}
        ShardCount: 1